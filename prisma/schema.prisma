generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bankAccounts BankAccount[]
  expenses     Expense[]
  incomes      Income[]
  budgets      Budget[]
  investments  Investment[]
  transfers    Transfer[]

  @@map("users")
}

model BankAccount {
  id            Int         @id @default(autoincrement())
  userId        Int         @map("user_id")
  name          String
  bankName      String      @map("bank_name")
  accountNumber String      @map("account_number")
  balance       Float       @default(0)
  type          AccountType
  color         String
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses  Expense[]
  incomes   Income[]
  transfersFrom Transfer[] @relation("FromAccount")
  transfersTo   Transfer[] @relation("ToAccount")

  @@map("bank_accounts")
}

model Expense {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  amount        Float
  category      String
  description   String
  expenseDate   DateTime @map("expense_date")
  tags          Json     @default("[]")
  bankAccountId Int?     @map("bank_account_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount? @relation(fields: [bankAccountId], references: [id])

  @@map("expenses")
}

model Income {
  id            Int             @id @default(autoincrement())
  userId        Int             @map("user_id")
  amount        Float
  source        String
  category      String
  description   String?
  incomeDate    DateTime        @map("income_date")
  isRecurring   Boolean         @default(false) @map("is_recurring")
  frequency     RecurrenceType?
  nextDate      DateTime?       @map("next_date")
  bankAccountId Int?            @map("bank_account_id")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount BankAccount? @relation(fields: [bankAccountId], references: [id])

  @@map("incomes")
}

model Budget {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  category     String
  budgetAmount Float    @map("budget_amount")
  color        String
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category])
  @@map("budgets")
}

model Investment {
  id            Int            @id @default(autoincrement())
  userId        Int            @map("user_id")
  symbol        String
  name          String
  type          InvestmentType
  quantity      Float
  purchasePrice Float          @map("purchase_price")
  currentPrice  Float          @map("current_price")
  purchaseDate  DateTime       @map("purchase_date")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("investments")
}

model Transfer {
  id              Int      @id @default(autoincrement())
  userId          Int      @map("user_id")
  fromAccountId   Int      @map("from_account_id")
  toAccountId     Int      @map("to_account_id")
  fromAccountName String   @map("from_account_name")
  toAccountName   String   @map("to_account_name")
  amount          Float
  transferFee     Float    @map("transfer_fee")
  description     String
  transferDate    DateTime @map("transfer_date")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  fromAccount BankAccount @relation("FromAccount", fields: [fromAccountId], references: [id])
  toAccount   BankAccount @relation("ToAccount", fields: [toAccountId], references: [id])

  @@map("transfers")
}

enum AccountType {
  checking
  savings
  credit
  ewallet
}

enum RecurrenceType {
  weekly
  bi_weekly
  monthly
  quarterly
  yearly
}

enum InvestmentType {
  stock
  mutual_fund
  etf
  bond
}
